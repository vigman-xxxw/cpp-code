
/*STL概述
- cpp语言的核心优势之一就是便于软件的重用
- cpp有两个方面体现重用
    1.面向对象的思想：继承和多态，标准类库
    2.泛型程序设计(generic programming)的思想：模板机制，以及标准模板库STL
- 泛型编程
        将一些常用的数据结构（比如链表，数组，二叉树）和算法（比如排序，查找）写成模板，
    以后不论数据结构里放的是什么对象，算法针对什么样的对象，都不必重新实现数据结构，重新编写算法
- 标准模板库(standard template library)就是一些常用数据结构和算法的模板的集合
- 有了STL，不必写大多的标准数据结构和算法，并且有非常高的性能
*/

/*STL中的基本概念
- 容器：可容纳各种数据类型的通用数据结构，是类模板
- 迭代器：可用于依次存取容器中元素，类似于指针
- 算法：用来操作容器中的元素的函数模板
    sort()来对一个vector中的数据进行排序
    find()来搜索一个list中的对象
- 算法本身与他们操作的数据的类型无关，因此他们可以在从简单数组到高复杂容器的任何数据结构上使用

//示例：
int array[100];
该数组就是容器，而int*类型的指针变量就可以作为迭代器，sort算法可以作用于该容器上，对其进行排序
sort(array,array+70);  //将前70个元素排序
*/

/*容器概述
- 可以用于存放各种类型的数据(基本类型的变量，对象等)的数据结构，都是类模板。分为3类
    - 顺序容器
        - vector
        - deque
        - list
    - 关联容器
        - set
        - multiset
        - map
        - multimap
    - 容器适配器
        - stack
        - queque
        - priority_queue
*/

/*顺序容器简介
- 容器并非排序的，元素的插入位置同元素的值无关
- 有vector，deque，list三种

- vector 头文件 <vector>
- 动态数组(向量)。
        元素在内存连续存放。随机存取任何元素都能在常数时间完成。
    在尾端增删元素具有较佳的性能(大部分情况下是常数时间，因为是动态开辟空间，提前开好的空间不够时，就要重新分配空间O(n))

- deque 头文件 <deque>
- 双向队列。（有head指针和tail指针）
        元素再内存连续存放。随机存取任何元素都能在常数时间完成(但次于vector)。
    在两端增删元素具有较佳的性能(大部分情况下时常数时间)

- list 头文件 <list>
- 双向链表。
        元素在内存不连续存放。在任何位置增删元素都能在常数时间完成。不支持随机存取。

*/

/*关联容器简介
- 元素是排序的
- 插入任何元素，都按相应的排序规则来确定其位置
- 在查找时具有非常好的性能
- 通常以平衡二叉树方式实现，插入和检索的时间都是logN
- set/multiset 头文件 <set>
    set即集合。set中不允许相同的元素，multiset中允许存在相同的元素
- map/multimap 头文件 <map>
        map与set不同在于map中存放的元素有且仅有两个成员变量，一个为first，另一个为second，
    map根据first值对元素进行排序（规则可以自己定），并可快速地根据first来检索元素
        map同multimap地不同在于是否允许相同first值的元素
*/

/*容器适配器简介
- stack 头文件 <stack>
    栈。是项的有限序列，并满足序列中被删除、检索和修改的项只能是最近插入序列的项(栈顶的项)。后进先出

- queue 头文件 <queue>
    队列。插入只可以在尾部进行，删除、检索和修改只允许从头部进行。先进先出

- priority_queue 头文件 <queue>
    优先级队列。最高优先级元素总是第一个出列
*/

/*顺序容器和关联容器中都有的成员函数
- begin 返回指向容器中第一个元素的迭代器
- end 返回指向容器中最后一个元素后面的位置的迭代器
- rbegin 返回指向容器中最后一个元素的迭代器
- rend 返回指向容器中第一个元素前面的位置的迭代器
- erase 从容器中删除一个或几个元素
- clear 从容器中删除所有元素
*/

/*顺序容器的常用成员函数
- front 返回容器中第一个元素的引用
- back 返回容器中最后一个元素的引用
- push_back 在容器末尾增加新元素
- pop_back 删除容器末尾的元素
- erase 删除迭代器指向的元素(可能会使该迭代器失效)，或删除一个区间，返回被删除元素后面的那个元素的迭代器
*/